ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.7.1
FROM ${BASE_IMAGE}

ARG ROS_PKG=ros_base
ENV ROS_DISTRO=foxy
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"] 

WORKDIR /tmp

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        apt-utils \
        build-essential \
        software-properties-common \
        git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 
# add the ROS deb repo to the apt sources list
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# add apt repository for GCC/G++ compiler and debugger
RUN add-apt-repository -y 'ppa:ubuntu-toolchain-r/test'
RUN apt-get update
RUN apt-get install -y gdb libssl-dev gcc-8 g++-8
# install to update alternatives for easy switching
RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 1 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 1
RUN update-alternatives --set g++ /usr/bin/g++-8 && \
    update-alternatives --set gcc /usr/bin/gcc-8

# install cmake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.23.0-rc2/cmake-3.23.0-rc2.tar.gz
RUN tar -xzvf cmake-3.23.0-rc2.tar.gz
RUN cd cmake-3.23.0-rc2 && ./bootstrap -- -DCMAKE_BUILD_TYPE=Release && \
    make -j 12 && \
    make install && \
    rm -rf cmake-3.23.0-rc2.tar.gz && \
    rm -rf cmake-3.23.0-rc2

### python3.8
# add apt repository for python
RUN add-apt-repository -y 'ppa:deadsnakes/ppa'
RUN apt-get update

# install dependencies
# python3.8-dev dependencies are necessary for pip to build packages for arm64 platform
RUN apt-get clean
RUN apt-get update
RUN apt-get install -y libdbus-1-3 libdbus-1-dev
RUN apt-get install -y \
    git python3.8 python3.8-distutils python3.8-dev
# ensure python3.8 has most up to date version of pip
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python3.8 get-pip.py && \
    rm -rf get-pip.py

# set defaults
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 0 && \
    update-alternatives --set python3 /usr/bin/python3.8

# Dependency for colcon
# Do these separated because wheel and setuptools appear to be funky dependencies for evdev and Jetson.GPIO
RUN python3 -m pip install --upgrade setuptools wheel distlib
# fix numpy illegal instruction due to compiler-reordered code https://github.com/numpy/numpy/issues/18131
RUN export OPENBLAS_CORETYPE=ARMV8
RUN python3 -m pip install numpy==1.19.4 Jetson.GPIO dbus-next

# some colcon apt dependencies
RUN apt-get install -y \
    python3-colcon-common-extensions \
    python3-flake8 \
    python3-pip \
    python3-numpy \
    python3-pytest-cov \
    python3-rosdep \
    python3-setuptools \
    python3-vcstool \
    python3-rosinstall-generator \
    libbullet-dev \
    libasio-dev \
    libtinyxml2-dev \
    libcunit1-dev

# install some pip packages needed for testing
RUN python3 -m pip install -U \
    argcomplete \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-docstrings \
    flake8-import-order \
    flake8-quotes \
    pytest-repeat \
    pytest-rerunfailures \
    pytest


### opencv
# install gstreamer
RUN apt-get install -y libgstreamer1.0-0 \
    libgstreamer1.0-0-dbg \
    libgstreamer1.0-dev \
    libgstreamer-plugins-bad1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0 \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgtk-3-dev \
    gstreamer1.0-x
# install v4l2
RUN apt-get install -y libv4l-dev v4l-utils
RUN apt-get install -y libopenjp2-7 \
    libopenjp2-7-dev \
    libglew-dev \
    libtiff5-dev \
    libdc1394-22-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libpostproc-dev \
    libswscale-dev \
    libeigen3-dev \
    libtbb2 \
    libtbb-dev \
    libgtk2.0-dev \
    pkg-config \
    qv4l2 \
    v4l2ucp \
    libtesseract4 \
    unzip \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean
# we need gcc 8 to build for cuda 10.2
RUN update-alternatives --set g++ /usr/bin/g++-8 && \
    update-alternatives --set gcc /usr/bin/gcc-8
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.1.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.1.zip && \
    unzip opencv.zip && \
    unzip opencv_contrib.zip && \
    mkdir -p build
RUN rm -rf opencv.zip && \
    rm -rf opencv_contrib.zip
# see https://forums.developer.nvidia.com/t/cudnn-8-0-of-jp4-4p-recognized-under-7-5-version-by-opencv4-2-and-4-3/128167
RUN sed -i 's/file(READ "${CUDNN_INCLUDE_DIR}\/cudnn.h" CUDNN_H_CONTENTS)/file(READ "${CUDNN_INCLUDE_DIR}\/cudnn_version.h" CUDNN_H_CONTENTS)/' opencv-4.5.1/cmake/FindCUDNN.cmake
RUN export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
RUN export LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}

RUN cd build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr \
    -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.5.1/modules \
    -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
    -D WITH_OPENCL=OFF \
    -D WITH_CUDA=ON \
    -D CUDA_ARCH_BIN=5.3 \
    -D CUDA_ARCH_PTX="" \
    -D WITH_CUDNN=ON \
    -D WITH_CUBLAS=ON \
    -D ENABLE_FAST_MATH=ON \
    -D CUDA_FAST_MATH=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D ENABLE_NEON=ON \
    -D WITH_QT=OFF \
    -D WITH_OPENMP=ON \
    -D WITH_OPENGL=ON \
    -D BUILD_TIFF=ON \
    -D WITH_FFMPEG=ON \
    -D WITH_GSTREAMER=ON \
    -D WITH_TBB=ON \
    -D BUILD_TBB=ON \
    -D BUILD_TESTS=OFF \
    -D WITH_EIGEN=ON \
    -D WITH_V4L=ON \
    -D WITH_LIBV4L=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D INSTALL_C_EXAMPLES=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D BUILD_NEW_PYTHON_SUPPORT=ON \
    -D BUILD_opencv_python3=TRUE \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D BUILD_EXAMPLES=OFF ../opencv-4.5.1
RUN cd build && \
    make -j 12 && \
    make install && \
    cd .. && rm -rf build

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

###yaml-cpp
## compile yaml-cpp-0.6, which some ROS packages may use (but is not in the 18.04 apt repo)
RUN git clone --branch yaml-cpp-0.6.0 https://github.com/jbeder/yaml-cpp yaml-cpp-0.6 && \
    cd yaml-cpp-0.6 && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j$(nproc) && \
    cp libyaml-cpp.so.0.6.0 /usr/lib/aarch64-linux-gnu/ && \
    ln -s /usr/lib/aarch64-linux-gnu/libyaml-cpp.so.0.6.0 /usr/lib/aarch64-linux-gnu/libyaml-cpp.so.0.6

### ROS
# download/build ROS from source
RUN python3 -m pip install distro
RUN mkdir -p ${ROS_ROOT}/src && \
    cd ${ROS_ROOT} && \
    # https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249
    rosinstall_generator --deps --rosdistro ${ROS_DISTRO} ${ROS_PKG} \
		launch_xml \
		launch_yaml \
		launch_testing \
		launch_testing_ament_cmake \
		demo_nodes_cpp \
		demo_nodes_py \
		example_interfaces \
		camera_calibration_parsers \
		camera_info_manager \
		cv_bridge \
		v4l2_camera \
		vision_opencv \
		vision_msgs \
		image_geometry \
		image_pipeline \
		image_transport \
		compressed_image_transport \
		compressed_depth_image_transport \
		> ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    cat ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    vcs import src < ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
    # install dependencies using rosdep
    apt-get update && \
    cd ${ROS_ROOT} && \
    rosdep init && \
    rosdep update && \
    rosdep install -y \
    	  --ignore-src \
       --from-paths src \
	  --rosdistro ${ROS_DISTRO} \
	  --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    # build it!
    colcon build \
        --merge-install \
        --cmake-args -DCMAKE_BUILD_TYPE=Release && \
    # remove build files
    rm -rf ${ROS_ROOT}/src && \
    rm -rf ${ROS_ROOT}/logs && \
    rm -rf ${ROS_ROOT}/build && \
    rm ${ROS_ROOT}/*.rosinstall
    
#
# Set the default DDS middleware to cyclonedds
# https://github.com/ros2/rclcpp/issues/1335
#
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

### boooost
RUN wget https://downloads.sourceforge.net/project/boost/boost/1.78.0/boost_1_78_0.tar.gz \
    && tar xfz boost_1_78_0.tar.gz \
    && rm boost_1_78_0.tar.gz \
    && cd boost_1_78_0 \
    && ./bootstrap.sh --prefix=/usr/local --with-libraries=program_options \
    && ./b2 install \
    && cd .. \
    && rm -rf boost_1_78_0

### build joystick drivers
RUN git clone -b foxy-devel https://github.com/ros-drivers/joystick_drivers && \
    cd joystick_drivers && \
    source /opt/ros/$ROS_DISTRO/install/setup.bash && \
    colcon build --merge-install --install-base /opt/ros/foxy/install --packages-up-to joy --cmake-args -DCMAKE_BUILD_TYPE=Release && \
    cd .. && rm -rf joystick_drivers
    
# 
# setup entrypoint
#
COPY ./ros_entrypoint.sh /ros_entrypoint.sh

RUN sed -i \
    's/ros_env_setup="\/opt\/ros\/$ROS_DISTRO\/setup.bash"/ros_env_setup="${ROS_ROOT}\/install\/setup.bash"/g' \
    /ros_entrypoint.sh && \
    cat /ros_entrypoint.sh

RUN echo 'source ${ROS_ROOT}/install/setup.bash' >> /root/.bashrc


# clean up because i forgot to do it earlier and dont want to rebuild the entire image :(
RUN rm -rf \
    cmake-3.23.0-rc2 \
    cmake-3.23.0-rc2.tar.gz \
    opencv-4.5.1 \
    opencv_contrib-4.5.1 \
    yaml-cpp-0.6
    

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
WORKDIR /
