FROM dustynv/ros:foxy-ros-base-l4t-r32.7.1

# some nice tools to have
RUN apt-get update && apt-get install -y build-essential software-properties-common apt-utils 
RUN apt-get install -y \
    vim \
    libi2c-dev \
    i2c-tools \
    net-tools \
    openssh-server

# add apt repository for GCC/G++ compiler and debugger
RUN add-apt-repository -y 'ppa:ubuntu-toolchain-r/test'
RUN apt-get update
RUN apt-get install -y gcc-11 g++-11 gdb libssl-dev
RUN apt-get install -y gcc-8 g++-8
# install to update alternatives for easy switching
RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 1 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 1 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 0 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 0 && \
    update-alternatives --set g++ /usr/bin/g++-11 && \
    update-alternatives --set gcc /usr/bin/gcc-11

# Ensure CMake is updated :)
RUN wget https://github.com/Kitware/CMake/releases/download/v3.23.0-rc2/cmake-3.23.0-rc2.tar.gz
RUN tar -xzvf cmake-3.23.0-rc2.tar.gz
RUN cd cmake-3.23.0-rc2 && cmake . && \
    make -j 12 && \
    make install && \
    rm -rf cmake-3.23.0-rc2.tar.gz && \
    rm -rf cmake-3.23.0-rc2

### opencv
# install gstreamer
RUN apt-get install -y libgstreamer1.0-0 \
    libgstreamer1.0-0-dbg \
    libgstreamer1.0-dev \
    libgstreamer-plugins-bad1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0 \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgtk-3-dev \
    gstreamer1.0-x
# install v4l2
RUN apt-get install -y libv4l-dev v4l-utils
RUN apt-get install -y libopenjp2-7 \
    libopenjp2-7-dev \
    libglew-dev \
    libtiff5-dev \
    zlib1g-dev \
    libjpeg-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libpostproc-dev \
    libswscale-dev \
    libeigen3-dev \
    libtbb-dev \
    libgtk2.0-dev \
    pkg-config \
    libtesseract4
# we need gcc 8 to build for cuda 10.2
RUN update-alternatives --set g++ /usr/bin/g++-8 && \
    update-alternatives --set gcc /usr/bin/gcc-8
RUN apt-get install -y unzip
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.0.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.0.zip && \
    unzip opencv.zip && \
    unzip opencv_contrib.zip && \
    mkdir -p build && cd build && \
    cmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.5.0/modules ../opencv-4.5.0 -DCMAKE_BUILD_TYPE=Release -DBUILD_opencv_python3=ON -DWITH_CUDA=ON -DWITH_GSTREAMER=ON && \
    make -j 12 && \
    make install
# reset default gcc/++ to 11
RUN update-alternatives --set g++ /usr/bin/g++-11 && \
    update-alternatives --set gcc /usr/bin/gcc-11

### python3.8
# add apt repository for python
RUN add-apt-repository -y 'ppa:deadsnakes/ppa'
RUN apt-get update

# install dependencies
# python3.8-dev dependencies are necessary for pip to build packages for arm64 platform
RUN apt-get clean
RUN apt-get update
RUN apt-get install -y \
    git python3.8 python3.8-distutils libdbus-1-dev python3.8-dev
# ensure python3.8 has most up to date version of pip
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python3.8 get-pip.py && \
    rm -rf get-pip.py

# Dependency for colcon
# Do these separated because wheel and setuptools appear to be funky dependencies for evdev and Jetson.GPIO
RUN python3.8 -m pip install --upgrade setuptools wheel distlib
# fix numpy illegal instruction due to compiler-reordered code https://github.com/numpy/numpy/issues/18131
RUN export OPENBLAS_CORETYPE=ARMV8
RUN python3.8 -m pip install numpy==1.19.4

# some python dependencies
RUN python3.8 -m pip install Jetson.GPIO dbus-python
# some apt dependencies
RUN apt-get install -y python3-colcon-common-extensions python3-vcstool

# set defaults
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 0 && \
    update-alternatives --set python3 /usr/bin/python3.8

### boooost
RUN wget https://downloads.sourceforge.net/project/boost/boost/1.78.0/boost_1_78_0.tar.gz \
    && tar xfz boost_1_78_0.tar.gz \
    && rm boost_1_78_0.tar.gz \
    && cd boost_1_78_0 \
    && ./bootstrap.sh --prefix=/usr/local --with-libraries=program_options \
    && ./b2 install \
    && cd .. \
    && rm -rf boost_1_78_0

### build joystick drivers
RUN git clone -b foxy-devel https://github.com/ros-drivers/joystick_drivers && \
    cd joystick_drivers && \
    source /opt/ros/$ROS_DISTRO/install/setup.bash && \
    colcon build --symlink-install --install-base /opt/ros/foxy/install --packages-up-to joy && \
    cd .. && rm -rf joystick_drivers